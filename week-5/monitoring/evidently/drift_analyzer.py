import logging
import sys
from datetime import datetime

from clickhouse_client import ClickHouseClient
from evidently_client import EvidentlyClient
from config import Config

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class YoloDriftAnalyzer:
    def __init__(self):
        self.clickhouse_client = ClickHouseClient()
        self.evidently_client = EvidentlyClient()
        logger.info("YOLO Drift Analyzer initialized")
    
    def analyze_drift(self) -> str:
        """
        –í–∏–∫–æ–Ω—É—î –∞–Ω–∞–ª—ñ–∑ –¥—Ä–∏—Ñ—Ç—É:
        1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î reference –¥–∞—Ç–∞—Å–µ—Ç –∑ Evidently Cloud
        2. –°—Ç–≤–æ—Ä—é—î current –¥–∞—Ç–∞—Å–µ—Ç –∑ ClickHouse (–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤)
        3. –°—Ç–≤–æ—Ä—é—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î drift —Ä–µ–ø–æ—Ä—Ç —É Cloud (–∑ –≤–∫–ª—é—á–µ–Ω–∏–º–∏ current –¥–∞–Ω–∏–º–∏)
        """
        logger.info("Starting drift analysis...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            if not Config.REFERENCE_DATASET_ID:
                raise Exception("REFERENCE_DATASET_ID is required. Create reference dataset first.")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ClickHouse
            if not self.clickhouse_client.test_connection():
                raise Exception("ClickHouse connection failed")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–µ–∫—Ç –≤ Evidently
            project = self.evidently_client.create_or_get_project()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ current –¥–∞–Ω—ñ –∑ ClickHouse
            logger.info(f"Fetching current dataset (last {Config.CURRENT_DAYS_AGO} days)...")
            current_df = self.clickhouse_client.get_current_dataset()
            
            if current_df.empty:
                raise Exception(f"Current dataset is empty (no predictions in last {Config.CURRENT_DAYS_AGO} days)")
            
            logger.info(f"Current dataset: {len(current_df)} records")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ drift —Ä–µ–ø–æ—Ä—Ç (current –¥–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –∑ —Ä–µ–ø–æ—Ä—Ç–æ–º)
            logger.info("Creating drift report...")
            report_url = self.evidently_client.create_and_upload_drift_report(
                reference_dataset_id=Config.REFERENCE_DATASET_ID,
                current_df=current_df
            )
            
            logger.info("Drift analysis completed successfully")
            return report_url
            
        except Exception as e:
            logger.error(f"Error during drift analysis: {e}")
            raise

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ YOLO Drift Analysis")
    print("=" * 30)
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    errors = Config.validate()
    if errors:
        print("‚ùå Configuration errors:")
        for error in errors:
            print(f"   ‚Ä¢ {error}")
        sys.exit(1)
    
    try:
        analyzer = YoloDriftAnalyzer()
        report_url = analyzer.analyze_drift()
        
        print("‚úÖ Analysis completed!")
        print(f"üìä Report: {report_url}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 