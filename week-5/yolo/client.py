import requests
import sys
import json
import cv2
import os
import numpy as np
from pathlib import Path
from urllib.parse import urlparse

API_URL = "http://localhost:30080"

def check_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É API"""
    try:
        response = requests.get(f"{API_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å API: {data['status']}")
            print(f"   –ú–æ–¥–µ–ª—å: {data['model']}")
            return True
        else:
            print(f"‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –Ω–µ –≤–¥–∞–ª–∞—Å—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return False

def download_image_from_url(url):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ URL"""
    try:
        print(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL...")
        response = requests.get(url, stream=True, timeout=30)
        response.raise_for_status()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ numpy array –¥–ª—è OpenCV
        image_array = np.asarray(bytearray(response.content), dtype=np.uint8)
        image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)
        
        if image is None:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL")
            return None
            
        print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        return image, response.content
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None, None

def draw_detections(image, detections, output_path):
    """–ú–∞–ª—é–≤–∞–Ω–Ω—è bbox'—ñ–≤ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"""
    try:
        # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ (BGR format)
        colors = [
            (0, 255, 0),    # –ó–µ–ª–µ–Ω–∏–π
            (255, 0, 0),    # –°–∏–Ω—ñ–π  
            (0, 0, 255),    # –ß–µ—Ä–≤–æ–Ω–∏–π
            (255, 255, 0),  # –ë–ª–∞–∫–∏—Ç–Ω–∏–π
            (255, 0, 255),  # –ü—É—Ä–ø—É—Ä–æ–≤–∏–π
            (0, 255, 255),  # –ñ–æ–≤—Ç–∏–π
        ]
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –∞–Ω–æ—Ç–∞—Ü—ñ–π
        annotated_image = image.copy()
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ detection
        for i, detection in enumerate(detections):
            bbox = detection['bbox']
            class_name = detection['class_name']
            confidence = detection['confidence']
            
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ bbox
            x1, y1, x2, y2 = map(int, bbox)
            
            # –í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—É
            color = colors[i % len(colors)]
            
            # –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
            cv2.rectangle(annotated_image, (x1, y1), (x2, y2), color, 2)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç—É
            label = f"{class_name}: {confidence:.2f}"
            
            # –†–æ–∑–º—ñ—Ä —Ç–µ–∫—Å—Ç—É
            font = cv2.FONT_HERSHEY_SIMPLEX
            font_scale = 0.6
            thickness = 2
            (text_width, text_height), _ = cv2.getTextSize(label, font, font_scale, thickness)
            
            # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É
            cv2.rectangle(annotated_image, (x1, y1 - text_height - 10), (x1 + text_width, y1), color, -1)
            
            # –¢–µ–∫—Å—Ç
            cv2.putText(annotated_image, label, (x1, y1 - 5), font, font_scale, (255, 255, 255), thickness)
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        cv2.imwrite(output_path, annotated_image)
        print(f"üì∏ –ê–Ω–æ—Ç–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {output_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞–ª—é–≤–∞–Ω–Ω—è –¥–µ—Ç–µ–∫—Ü—ñ–π: {e}")
        return False

def detect_objects_from_url(url):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ URL —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ –¥–µ—Ç–µ–∫—Ü—ñ—é"""
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image, image_bytes = download_image_from_url(url)
        if image is None or image_bytes is None:
            return None, None
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
        print(f"üîç –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ API...")
        files = {'file': ('image.jpg', image_bytes, 'image/jpeg')}
        response = requests.post(f"{API_URL}/detect", files=files)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –î–µ—Ç–µ–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"   –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {data['processing_time_ms']:.1f}–º—Å")
            print(f"   –í–∏—è–≤–ª–µ–Ω–æ –æ–±'—î–∫—Ç—ñ–≤: {data['objects_detected']}")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–µ—Ç–µ–∫—Ü—ñ—ó
            if data['detections']:
                print(f"\nüîç –í–∏—è–≤–ª–µ–Ω—ñ –æ–±'—î–∫—Ç–∏:")
                for i, detection in enumerate(data['detections'], 1):
                    bbox = detection['bbox']
                    print(f"   {i}. {detection['class_name']}: {detection['confidence']:.3f}")
                    print(f"      bbox: [{bbox[0]:.0f}, {bbox[1]:.0f}, {bbox[2]:.0f}, {bbox[3]:.0f}]")
            
            return data, image
        else:
            print(f"‚ùå –î–µ—Ç–µ–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {response.status_code}")
            print(f"   –ü–æ–º–∏–ª–∫–∞: {response.text}")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None, None

def is_url(string):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ä—è–¥–æ–∫ URL-–∞–¥—Ä–µ—Å–æ—é"""
    try:
        result = urlparse(string)
        return all([result.scheme, result.netloc])
    except:
        return False

def read_local_image(image_path):
    """–ß–∏—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    try:
        print(f"üì• –ß–∏—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        image = cv2.imread(image_path)
        
        if image is None:
            print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_path}")
            return None, None
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ bytes –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        _, image_bytes = cv2.imencode('.jpg', image)
        image_bytes = image_bytes.tobytes()
        
        print(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ")
        return image, image_bytes
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return None, None

def main():
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python client.py <—à–ª—è—Ö_–¥–æ_–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è>")
        print("–ü—Ä–∏–∫–ª–∞–¥: python client.py images/test.jpg")
        sys.exit(1)
    
    image_path = sys.argv[1]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
    if not os.path.isfile(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        print("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥—ñ–π—Å–Ω–∏–π —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        sys.exit(1)
    
    print("üöÄ –ö–ª—ñ—î–Ω—Ç –¥–µ—Ç–µ–∫—Ü—ñ—ó YOLO11")
    print("=" * 40)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É API
    if not check_health():
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ API –∑–∞–ø—É—â–µ–Ω–æ: python app.py")
        sys.exit(1)
    
    print()
    
    # –ß–∏—Ç–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    image, image_bytes = read_local_image(image_path)
    if image is None or image_bytes is None:
        sys.exit(1)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
    print(f"üîç –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ API...")
    files = {'file': ('image.jpg', image_bytes, 'image/jpeg')}
    response = requests.post(f"{API_URL}/detect", files=files)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –î–µ—Ç–µ–∫—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {result['processing_time_ms']:.1f}–º—Å")
        print(f"   –í–∏—è–≤–ª–µ–Ω–æ –æ–±'—î–∫—Ç—ñ–≤: {result['objects_detected']}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–µ—Ç–µ–∫—Ü—ñ—ó
        if result['detections']:
            print(f"\nüîç –í–∏—è–≤–ª–µ–Ω—ñ –æ–±'—î–∫—Ç–∏:")
            for i, detection in enumerate(result['detections'], 1):
                bbox = detection['bbox']
                print(f"   {i}. {detection['class_name']}: {detection['confidence']:.3f}")
                print(f"      bbox: [{bbox[0]:.0f}, {bbox[1]:.0f}, {bbox[2]:.0f}, {bbox[3]:.0f}]")
        
        print(f"\nüìÑ –ü–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
        print(json.dumps(result, indent=2))
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        path = Path(image_path)
        output_path = f"{path.stem}_detected{path.suffix}"
        
        # –ú–∞–ª—é–≤–∞–Ω–Ω—è bbox'—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –¥–µ—Ç–µ–∫—Ü—ñ–π
        if draw_detections(image, result['detections'], output_path):
            print(f"‚ú® –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–Ω–æ—Ç–æ–≤–∞–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {output_path}")
        
    elif response.status_code == 200 and result['objects_detected'] == 0:
        print("‚ÑπÔ∏è  –û–±'—î–∫—Ç—ñ–≤ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ")
    else:
        print(f"‚ùå –î–µ—Ç–µ–∫—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è: {response.status_code}")
        print(f"   –ü–æ–º–∏–ª–∫–∞: {response.text}")

if __name__ == "__main__":
    main() 
